import os
import json
from threading import Thread
from flask import Flask

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù'
OWNER_ID = 123456789  # —É–∫–∞–∂–∏ —Å–≤–æ–π

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

flask_thread = Thread(target=run_flask)
flask_thread.start()

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

counter_file = "counter.txt"
mapping_file = "messages_map.json"

# –•—Ä–∞–Ω–∏–º map: {message_id: user_id}
def load_mapping():
    if os.path.exists(mapping_file):
        with open(mapping_file, "r") as f:
            return json.load(f)
    return {}

def save_mapping(mapping):
    with open(mapping_file, "w") as f:
        json.dump(mapping, f)

def get_next_id():
    if not os.path.exists(counter_file):
        with open(counter_file, "w") as f:
            f.write("1")
            return 1
    with open(counter_file, "r+") as f:
        value = int(f.read().strip())
        next_value = value + 1
        f.seek(0)
        f.write(str(next_value))
        f.truncate()
    return next_value

# FSM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
class ReplyState(StatesGroup):
    waiting_for_text = State()

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–≤–µ—Ä–Ω–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å... –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —É—á—Ç–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å, —É–≤—ã, –Ω–µ —Å–º–æ–≥—É. –ù–æ –º–æ–∂–µ—Ç –æ–Ω–æ –∏ –∫ –ª—É—á—à–µ–º—É?"
    )

@dp.message_handler(content_types=types.ContentType.ANY)
async def anonymous_message(message: types.Message):
    if message.text and message.text.startswith('/start'):
        return

    message_id = get_next_id()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mapping = load_mapping()
    mapping[str(message_id)] = user_id
    save_mapping(mapping)

    user = message.from_user
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = f"@{user.username}" if user.username else "–ë–µ–∑ –Ω–∏–∫–∞"
    phone = "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number

    notification = (
        f'‚ö°Ô∏è–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{first_name}" "{last_name}" {username}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}'
    )
    content_header = f"üì• –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_id}:"

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"reply_{message_id}")
    )

    await bot.send_message(OWNER_ID, notification)
    # —Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if message.text:
        await bot.send_message(OWNER_ID, f"{content_header}\n\n{message.text}", reply_markup=keyboard)
    elif message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(OWNER_ID, file_id, caption=content_header + (("\n" + message.caption) if message.caption else ""), reply_markup=keyboard)
    elif message.document:
        await bot.send_document(OWNER_ID, message.document.file_id, caption=content_header + (("\n" + message.caption) if message.caption else ""), reply_markup=keyboard)
elif message.video:
        await bot.send_video(OWNER_ID, message.video.file_id, caption=content_header + (("\n" + message.caption) if message.caption else ""), reply_markup=keyboard)

    await message.reply("–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('reply_'))
async def process_callback_reply(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id != OWNER_ID:
        return await callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å!", show_alert=True)
    message_id = callback_query.data.split('_')[1]
    await state.update_data(answer_to_id=message_id)
    await bot.send_message(OWNER_ID, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{message_id}:")
    await ReplyState.waiting_for_text.set()
    await callback_query.answer()

@dp.message_handler(state=ReplyState.waiting_for_text, content_types=types.ContentType.ANY)
async def process_admin_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('answer_to_id')
    mapping = load_mapping()
    user_id = mapping.get(str(message_id))
    if not user_id:
        await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return
    try:
        await bot.send_message(user_id, "‚ÄºÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∞–Ω–æ–Ω–∏–º–∫—É!")
        if message.text:
            await bot.send_message(user_id, message.text)
        elif message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "")
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption=message.caption or "")
        elif message.video:
            await bot.send_video(user_id, message.video.file_id, caption=message.caption or "")
        else:
            await bot.send_message(user_id, "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")
        await message.reply("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
