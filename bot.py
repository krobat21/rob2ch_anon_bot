import os
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = 'YOUR_BOT_TOKEN'
OWNER_ID = 123456789  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

counter_file = "counter.txt"
mapping_file = "messages_map.json"

# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =================

def load_mapping():
    if os.path.exists(mapping_file):
        with open(mapping_file, "r") as f:
            return json.load(f)
    return {}

def save_mapping(mapping):
    with open(mapping_file, "w") as f:
        json.dump(mapping, f)

def get_next_id():
    if not os.path.exists(counter_file):
        with open(counter_file, "w") as f:
            f.write("1")
            return 1
    with open(counter_file, "r+") as f:
        value = int(f.read().strip())
        next_value = value + 1
        f.seek(0)
        f.write(str(next_value))
        f.truncate()
    return next_value

# ================= –°–æ—Å—Ç–æ—è–Ω–∏—è =================

class ReplyState(StatesGroup):
    waiting_for_admin = State()

class UserReplyState(StatesGroup):
    waiting_for_user = State()

# ================= –ö–æ–º–∞–Ω–¥—ã =================

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –¥–æ–π–¥–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
    )

# ================= –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ =================

@dp.message_handler(content_types=types.ContentType.ANY, state="*")
async def anonymous_message(message: types.Message, state: FSMContext):
    if message.text and message.text.startswith('/start'):
        return

    message_id = get_next_id()
    user_id = message.from_user.id

    mapping = load_mapping()
    mapping[str(message_id)] = user_id
    save_mapping(mapping)

    user = message.from_user
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = f"@{user.username}" if user.username else "–ë–µ–∑ –Ω–∏–∫–∞"

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"reply_{message_id}")
    )

    await bot.send_message(
        OWNER_ID,
        f"‚ö°Ô∏è–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_id} –æ—Ç {first_name} {last_name} {username}"
    )

    content_header = f"üì• –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_id}:"

    if message.text:
        await bot.send_message(OWNER_ID, f"{content_header}\n\n{message.text}", reply_markup=keyboard)
    elif message.photo:
        await bot.send_photo(OWNER_ID, message.photo[-1].file_id, caption=content_header, reply_markup=keyboard)
    elif message.document:
        await bot.send_document(OWNER_ID, message.document.file_id, caption=content_header, reply_markup=keyboard)
    elif message.video:
        await bot.send_video(OWNER_ID, message.video.file_id, caption=content_header, reply_markup=keyboard)
    else:
        await bot.send_message(OWNER_ID, f"{content_header} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)", reply_markup=keyboard)

    await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ================= –ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç ¬´–æ—Ç–≤–µ—Ç–∏—Ç—å¬ª =================

@dp.callback_query_handler(lambda c: c.data.startswith('reply_'))
async def process_callback_reply(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id != OWNER_ID:
        return await callback_query.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)

    message_id = callback_query.data.split('_')[1]
    await state.update_data(answer_to_id=message_id)
    await bot.send_message(OWNER_ID, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{message_id}:")
    await ReplyState.waiting_for_admin.set()
    await callback_query.answer()

# ================= –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç =================

@dp.message_handler(state=ReplyState.waiting_for_admin, content_types=types.ContentType.ANY)
async def process_admin_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("answer_to_id")
    mapping = load_mapping()
    user_id = mapping.get(str(message_id))

    if not user_id:
        await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await state.finish()

    try:
        user_id = int(user_id)

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data=f"continue_{message_id}")
        )

        await bot.send_message(user_id, "üì© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if message.text:
            await bot.send_message(user_id, message.text, reply_markup=keyboard)
        elif message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "", reply_markup=keyboard)
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption=message.caption or "", reply_markup=keyboard)
        elif message.video:
            await bot.send_video(user_id, message.video.file_id, caption=message.caption or "", reply_markup=keyboard)
        else:
            await bot.send_message(user_id, "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=keyboard)

        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        await state.finish()

# ================= –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ =================

@dp.callback_query_handler(lambda c: c.data.startswith("continue_"))
async def process_continue_user(callback_query: types.CallbackQuery, state: FSMContext):
    message_id = callback_query.data.split('_')[1]
    await state.update_data(dialog_id=message_id)
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await UserReplyState.waiting_for_user.set()
    await callback_query.answer()

@dp.message_handler(state=UserReplyState.waiting_for_user, content_types=types.ContentType.ANY)
async def process_user_dialog_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dialog_id = data.get("dialog_id")
    mapping = load_mapping()
    user_id = message.from_user.id

    if str(mapping.get(str(dialog_id))) != str(user_id):
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return await state.finish()

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{dialog_id}")
    )

    header = f"üì® –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ‚Ññ{dialog_id}:"

    if message.text:
        await bot.send_message(OWNER_ID, header + "\n\n" + message.text, reply_markup=keyboard)
    elif message.photo:
        await bot.send_photo(OWNER_ID, message.photo[-1].file_id, caption=header + (("\n" + message.caption) if message.caption else ""), reply_markup=keyboard)
    elif message.document:
        await bot.send_document(OWNER_ID, message.document.file_id, caption=header, reply_markup=keyboard)
    elif message.video:
        await bot.send_video(OWNER_ID, message.video.file_id, caption=header, reply_markup=keyboard)
    else:
        await bot.send_message(OWNER_ID, header + " (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)", reply_markup=keyboard)

    await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.finish()

# ================= –ó–∞–ø—É—Å–∫ =================

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
