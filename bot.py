import os
import json
from threading import Thread
from flask import Flask

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
OWNER_ID = –í–ê–®_ID   # –¶–ï–õ–û–ï –ß–ò–°–õ–û

# ==== Flask –¥–ª—è Ping (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ====
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

flask_thread = Thread(target=run_flask)
flask_thread.start()
# ==== END Flask ====

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

counter_file = "counter.txt"
mapping_file = "messages_map.json"

# {message_id: user_id }
def load_mapping():
    if os.path.exists(mapping_file):
        with open(mapping_file, "r") as f:
            return json.load(f)
    return {}

def save_mapping(mapping):
    with open(mapping_file, "w") as f:
        json.dump(mapping, f)

def get_next_id():
    if not os.path.exists(counter_file):
        with open(counter_file, "w") as f:
            f.write("1")
            return 1
    with open(counter_file, "r+") as f:
        value = int(f.read().strip())
        next_value = value + 1
        f.seek(0)
        f.write(str(next_value))
        f.truncate()
    return next_value

# FSM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
class ReplyState(StatesGroup):
    waiting_for_admin = State()
# FSM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserReplyState(StatesGroup):
    waiting_for_user = State()

# /start
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –¥–æ–π–¥–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!"
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=types.ContentType.ANY, state="*")
async def anonymous_message(message: types.Message, state: FSMContext):
    if message.text and message.text.startswith('/start'):
        return

    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º message_id –∏ –º–∞–ø–ø–∏–Ω–≥
    message_id = get_next_id()
    user_id = message.from_user.id

    mapping = load_mapping()
    mapping[str(message_id)] = user_id
    save_mapping(mapping)

    user = message.from_user
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = f"@{user.username}" if user.username else "–ë–µ–∑ –Ω–∏–∫–∞"
    phone = "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number

    notification = (
        f'‚ö°Ô∏è–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{first_name}" "{last_name}" {username}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}'
    )
    content_header = f"üì• –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{message_id}:"

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"reply_{message_id}")
    )

    await bot.send_message(OWNER_ID, notification)

    sent_message = None
    if message.text:
        sent_message = await bot.send_message(OWNER_ID, f"{content_header}\n\n{message.text}", reply_markup=keyboard)
    elif message.photo:
        file_id = message.photo[-1].file_id
        sent_message = await bot.send_photo(OWNER_ID, file_id, caption=content_header + (("\n" + message.caption) if message.caption else ""), reply_markup=keyboard)
    elif message.document:
sentmessage = await bot.senddocument(OWNERID, message.document.fileid, caption=contentheader + (("\n" + message.caption) if message.caption else ""), replymarkup=keyboard)
    elif message.video:
        sentmessage = await bot.sendvideo(OWNERID, message.video.fileid, caption=contentheader + (("\n" + message.caption) if message.caption else ""), replymarkup=keyboard)
    else:
        await bot.sendmessage(OWNERID, f"{contentheader} (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!)", replymarkup=keyboard)

    await message.reply("–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callbackqueryhandler(lambda c: c.data and c.data.startswith('reply'))
async def processcallbackreply(callbackquery: types.CallbackQuery, state: FSMContext):
    if int(callbackquery.fromuser.id) != int(OWNERID):
        return await callbackquery.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å!", showalert=True)
    messageid = callbackquery.data.split('')1
    await state.updatedata(answertoid=messageid)
    await bot.sendmessage(OWNERID, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{messageid}:")
    await ReplyState.waitingforadmin.set()
    await callbackquery.answer()

# –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.messagehandler(state=ReplyState.waitingforadmin, contenttypes=types.ContentType.ANY)
async def processadminanswer(message: types.Message, state: FSMContext):
    data = await state.getdata()
    messageid = data.get('answertoid')
    mapping = loadmapping()
    userid = mapping.get(str(messageid))
    if not userid:
        await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return
    try:
        # 1. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
        kbcont = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥", callbackdata=f"continue{messageid}")
        )
        await bot.sendmessage(userid, "‚ÄºÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∞–Ω–æ–Ω–∏–º–∫—É!")
        # 2. –û—Ç–≤–µ—Ç (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)
        if message.text:
            await bot.sendmessage(userid, message.text, replymarkup=kbcont)
        elif message.photo:
            await bot.sendphoto(userid, message.photo-1.fileid, caption=(message.caption or ""), replymarkup=kbcont)
        elif message.document:
            await bot.senddocument(userid, message.document.fileid, caption=(message.caption or ""), replymarkup=kbcont)
        elif message.video:
            await bot.sendvideo(userid, message.video.fileid, caption=(message.caption or ""), replymarkup=kbcont)
        else:
            await bot.sendmessage(userid, "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.", replymarkup=kbcont)
        await message.reply("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
    await state.finish()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥"
@dp.callbackqueryhandler(lambda c: c.data and c.data.startswith('continue'))
async def processcontinueuser(callbackquery: types.CallbackQuery, state: FSMContext):
    messageid = callbackquery.data.split('')1
    await state.updatedata(dialogid=messageid)
    await bot.sendmessage(callbackquery.fromuser.id, "–ù–∞–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É.")
    await UserReplyState.waitingforuser.set()
    await callbackquery.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
@dp.messagehandler(state=UserReplyState.waitingforuser, contenttypes=types.ContentType.ANY)
async def processuserdialogreply(message: types.Message, state: FSMContext):
    data = await state.getdata()
    dialogid = data.get("dialogid")
    mapping = loadmapping()
    userid = message.fromuser.id
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ (userid –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å)
    if mapping.get(str(dialogid)) != userid:
        await message.reply("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.")
        await state.finish()
        return

    header = f'‚úâÔ∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (‚Ññ{dialogid}):'
    kb = InlineKeyboardMarkup().add(


InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{dialog_id}")
    )

    if message.text:
        await bot.send_message(OWNER_ID, header + "\n\n" + message.text, reply_markup=kb)
    elif message.photo:
        await bot.send_photo(OWNER_ID, message.photo[-1].file_id, caption=header + (("\n" + message.caption) if message.caption else ""), reply_markup=kb)
    elif message.document:
        await bot.send_document(OWNER_ID, message.document.file_id, caption=header + (("\n" + message.caption) if message.caption else ""), reply_markup=kb)
    elif message.video:
        await bot.send_video(OWNER_ID, message.video.file_id, caption=header + (("\n" + message.caption) if message.caption else ""), reply_markup=kb)
    else:
        await bot.send_message(OWNER_ID, header + " (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è).", reply_markup=kb)

    await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É! –ñ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
